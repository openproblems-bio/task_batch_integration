import os
import sys
import tarfile
import tempfile
import zipfile

import anndata as ad
import mlflow.pyfunc
import pandas as pd

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    "input": "resources_test/.../input.h5ad",
    "output": "output.h5ad",
    "model": "resources_test/.../model",
}
meta = {"name": "scvi_mlflow"}
## VIASH END

sys.path.append(meta["resources_dir"])
from exit_codes import exit_non_applicable
from read_anndata_partial import read_anndata
from unpack import unpack_directory

print("====== scVI (MLflow model) ======", flush=True)

print("\n>>> Reading input files...", flush=True)
print(f"Input H5AD file: '{par['input']}'", flush=True)
adata = read_anndata(par["input"], X="layers/counts", obs="obs", var="var", uns="uns")

if adata.uns["dataset_organism"] == "homo_sapiens":
    organism = "human"
elif adata.uns["dataset_organism"] == "mus_musculus":
    organism = "mouse"
else:
    exit_non_applicable(
        f"scVI (MLflow) can only be used with human or mouse data "
        f'(dataset_organism == "{adata.uns["dataset_organism"]}")'
    )

print(adata, flush=True)

print("\n>>> Unpacking model...", flush=True)
model_dir, model_temp = unpack_directory(par["model"])

print(f"\n>>> Loading {organism} model...", flush=True)
model = mlflow.pyfunc.load_model(model_dir, model_config={"organism": organism})
print(model, flush=True)

print("\n>>> Writing temporary input H5AD file...", flush=True)
input_adata = ad.AnnData(X=adata.X.copy())
input_adata.var_names = adata.var["feature_id"].values
input_adata.obs["batch"] = adata.obs["batch"].values
print(input_adata, flush=True)

h5ad_file = tempfile.NamedTemporaryFile(suffix=".h5ad", delete=False)
print(f"Temporary H5AD file: '{h5ad_file.name}'", flush=True)
input_adata.write(h5ad_file.name)
del input_adata

print("\n>>> Running model...", flush=True)
input_df = pd.DataFrame({"input_uri": [h5ad_file.name]})
embedding = model.predict(input_df)

print("\n>>> Storing output...", flush=True)
output = ad.AnnData(
    obs=adata.obs[[]],
    var=adata.var[[]],
    obsm={
        "X_emb": embedding,
    },
    uns={
        "dataset_id": adata.uns["dataset_id"],
        "normalization_id": adata.uns["normalization_id"],
        "method_id": meta["name"],
    },
)
print(output)

print("\n>>> Writing output to file...", flush=True)
print(f"Output H5AD file: '{par['output']}'", flush=True)
output.write_h5ad(par["output"], compression="gzip")

print("\n>>> Cleaning up temporary files...", flush=True)
if model_temp is not None:
    model_temp.cleanup()
h5ad_file.close()
os.unlink(h5ad_file.name)

print("\n>>> Done!", flush=True)
